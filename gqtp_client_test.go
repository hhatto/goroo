package goroo

import (
	"fmt"
	"io"
	"net"
	"testing"
)

type gqtpServer struct {
	Address  string
	Listener net.Listener
	handler  func(io.Writer, io.Reader)
}

func (g *gqtpServer) start() {
	for {
		conn, err := g.Listener.Accept()
		if err != nil {
			continue
		}
		g.handler(conn, conn)
		conn.Close()
	}
}

func (g *gqtpServer) Close() {
	g.Listener.Close()
}

func newGqtpLocalListener() net.Listener {
	l, err := net.Listen("tcp", "127.0.0.1:0")
	if err != nil {
		if l, err = net.Listen("tcp6", "[::1]:0"); err != nil {
			panic(err)
		}
	}
	return l
}

func newGqtpServer(handler func(io.Writer, io.Reader)) *gqtpServer {
	l := newGqtpLocalListener()
	gs := &gqtpServer{l.Addr().String(), l, handler}
	go gs.start()
	return gs
}

func TestGqtp_TableList_Empty_Success(t *testing.T) {
	fmt.Println("create server")
	gs := newGqtpServer(func(w io.Writer, r io.Reader) {
		w.Write([]byte{0xc7, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5b, 0x5b, 0x5b, 0x22, 0x69, 0x64, 0x22, 0x2c, 0x22, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x5d, 0x2c, 0x5b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x22, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x2c, 0x5b, 0x22, 0x70, 0x61, 0x74, 0x68, 0x22, 0x2c, 0x22, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x2c, 0x5b, 0x22, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x2c, 0x22, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x2c, 0x5b, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x2c, 0x22, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x2c, 0x5b, 0x22, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2c, 0x22, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x2c, 0x5b, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x2c, 0x5b, 0x22, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5d, 0x5d, 0x5d})
	})
	defer gs.Close()

	fmt.Println("create clinet")
	client := newGqtpClient(gs.Address)
	res, err := client.Call("table_list", map[string]string{})
	if err != nil {
		t.Error(err)
	}
	if res.Status != 0 {
		t.Errorf("status not zero.[%d]", res.Status)
	}
	if len(res.Body.([]interface{})) != 1 {
		t.Errorf("body fail.[%s]", res.Body)
	}
}
